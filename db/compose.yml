services:
  ### MongoDB ###
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    restart: always
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    volumes:
      - ./data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    networks:
      - app-network
    environment:
      MONGO_INITDB_DATABASE: crimeLab

  ### Neo4j ###
  neo4j:
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=neo4j/password
    ports:
      - "7474:7474" # Port d'administration web
      - "7687:7687" # Port Bolt pour les connexions depuis une application
    restart: always
    container_name: neo4j
    volumes:
      - ./logs:/logs
    networks:
      - app-network

  ### Sync Service ###
  sync-service:
    depends_on:
      - mongo
      - neo4j
    build:
      context: ../sync-service
      dockerfile: Dockerfile
    env_file:
      - ../sync-service/.env
    container_name: sync-service
    ports:
      - "5001:5000"
    restart: always
    networks:
      - app-network

### RÃ©seau pour connecter les services ###
networks:
  app-network:
    driver: bridge

### Volumes persistants ###
volumes:
  mongo_data:
  logs:
